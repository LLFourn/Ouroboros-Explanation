# The players
enum Player <Alice Rob>;

constant \term:<👩> = Alice;
constant \term:<👱> = Rob;

enum Coin <Heads Tails>;

# Taken from https://tools.ietf.org/html/rfc3526#page-3
constant \𝑝 = qw|
    FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1
    29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD
    EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245
    E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
    EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D
    C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F
    83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D
    670C354E 4ABC9804 F1746C08 CA237327 FFFFFFFF FFFFFFFF
  |.join.parse-base(16);

constant \𝑞 = (𝑝 - 1) div 2;
constant \𝑔 = 2;
# The ranges
constant $ℤ𝑝 = ^𝑝; # Perl 6 for 0..(𝑝-1);
constant $ℤ𝑞 = ^𝑞;

# The types derived from the ranges
subset ℤ𝑝 of Int:D where $ℤ𝑝;
subset ℤ𝑞 of Int:D where $ℤ𝑞;
# The multiplicative group of order 𝑞 ( generated by 𝑔 )
subset 𝔾 of ℤ𝑝 where *.expmod(𝑞, 𝑝) == 1;
# define new operator ⊕ as bitwise xor
constant &infix:<⊕> := &[+^];

# Make Int gist as hex without affecting Enums
multi gist(Int:D $_) { '0x' ~ .base(16).lc }
multi gist(Enumeration:D $_) is default { .gist }

# Used to print clearly what is actually being sent between the parties
sub infix:<⟹>(Player:D $sender, *@message) {
    my constant GREEN      = "\e[32m";
    my constant RESET      = "\e[0m";
    my $header =  ">>>=====$sender sends====>>>";
    my @body = @message.map({ "{.key}: {gist .value}"});

    say GREEN ~ $header ~ RESET;
    say @body.join("\n");
    say GREEN ~ ('=' x $header.chars) ~ RESET;
}

# Put 40 Xs over the previous line's input
sub read-line(-->Str:D) {
    my $line = $*IN.get();
    say "\e[A\r" ~ ('X' x 40) ~ (' ' x $line.chars - 40);
    return $line;
}

sub secret-prompt(&parse) {
    until defined my $valid = parse(read-line) {
        say("Invalid value. Try again.")
    }
    return $valid;
}

sub CHOOSE-MOVE(Player:D $player --> Coin:D) {
    say "$player, choose an outcome.";
    say '[H]eads or [T]ails?';
    secret-prompt({ Coin::.values.first(*.starts-with(.uc)) });
}

sub CHOOSE-RANDOMNESS(Player:D $player --> ℤ𝑞) {
    say "$player, behave [H]onestly? or enter your own integer:";
    secret-prompt({
            when 'H' { $ℤ𝑞.pick }
            default  { try quietly .Int }
    });
}

sub COMMIT(ℤ𝑞 \𝑥 --> 𝔾) { expmod(𝑔, 𝑥, 𝑝) }

sub CLAIM(Player:D $player --> ℤ𝑞) {
    say "$player, what do you claim your randomness was?";
    say "([H] to use the true value)";
    secret-prompt({
            when 'H' { $*HINT }
            default  { try quietly .Int  }
    });
}

sub CHECK-RESULT(Coin $alice-move, Int $random-number) {
    my $odd = ? $random-number % 2;
    my $coin-toss = Coin($odd);
    my $result = $alice-move eq $coin-toss;

    print qq:to/END/;
    ============
    The final random number is:\n{gist $random-number}
    Which is { $odd ?? 'odd' !! 'even' }. So, the coin-toss resulted in $coin-toss.
    Alice chose $alice-move, so { $result ?? 👩 !! 👱 } wins!
    END
}

# Entrypoint
sub MAIN {
    # Keep a hint around so Alice doesn't have to remember her number
    my $*HINT;
    # Prompt alice for heads or tails;
    my Coin \𝑚 = CHOOSE-MOVE(👩);

    my 𝔾 \𝑐 = do {
        # Prompt alice for her randomness
        $*HINT = my ℤ𝑞 \𝑠ₐ = CHOOSE-RANDOMNESS(👩);
        # Return the resulting commitment
        COMMIT(𝑠ₐ);
    }

    # Alice sends her commitment and her move in the clear to Rob
    👩 ⟹  ( commitment => 𝑐, move => 𝑚 );

    # Rob sends his randomness in the clear to Alice
    my ℤ𝑞 \𝑠ᵣ = CHOOSE-RANDOMNESS(👱);
    👱 ⟹ ( randomness => 𝑠ᵣ );

    # Alice sends her claim to Rob
    my ℤ𝑞 \𝑠ₐʹ = CLAIM(👩);
    👩 ⟹  ( randomness => 𝑠ₐʹ );

    # Calculate what the commitment should be from the claim
    my 𝔾 \𝑐ʹ = COMMIT(𝑠ₐʹ);

    # Check they're the same
    if 𝑐ʹ eq  𝑐 {
        say "{👩}'s claim is the same as her commitment.";
        my \𝑠 = 𝑠ᵣ ⊕ 𝑠ₐʹ;
        CHECK-RESULT(𝑚, 𝑠);
    }
    else {
        print qq:to/END/;
        say "{👩}'s claim: {gist 𝑐ʹ}";
        say "{👩} is lying! Her claim is not the same as her commitment.";
        say "{👱} wins by default!";
        END
    }
}
